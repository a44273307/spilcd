C51 COMPILER V9.05   MAIN                                                                  05/07/2023 15:05:49 PAGE 1   


C51 COMPILER V9.05, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN main.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE main.c LARGE BROWSE DEBUG OBJECTEXTEND

line level    source

   1          #include "STC8G.h"
   2          #include <intrins.h>
   3          #include <stdio.h>
   4          #include "lcd.h"
   5          #include <string.h>
   6          
   7          #include <stdio.h>
   8          #include <string.h>
   9          #include <stdlib.h>
  10          
  11          
  12          #define u8 unsigned char
  13          #define FOSC 24000000UL
  14          #define BRT (65536 - FOSC / 9600 / 4)
  15          
  16          int keyon= 0;
  17          int keylow=1;
  18          int keyok= 2;
  19          int keyup=3;
  20          
  21          int nowzhi=500;
  22          int setzhi=500;
  23          #define maxsetzhi 2047 
  24          
  25          
  26          
  27          bit busy;
  28          void UartInit() // 11.0592 9600
  29          {
  30   1              SCON = 0x50;            //8位数据,可变波特率
  31   1              AUXR |= 0x40;           //定时器时钟1T模式
  32   1              AUXR &= 0xFE;           //串口1选择定时器1为波特率发生器
  33   1              TMOD &= 0x0F;           //设置定时器模式
  34   1              TL1 = 0x8F;             //设置定时初始值
  35   1              TH1 = 0xFD;             //设置定时初始值
  36   1              ET1 = 0;                //禁止定时器%d中断
  37   1              TR1 = 1;                //定时器1开始计时
  38   1              ES = 1;
  39   1              EA = 1;
  40   1              P_SW1 = 0x00; // RXD/P3.0, TXD/P3.1
  41   1      }
  42          void UartSendByte(u8 dat)
  43          {
  44   1              SBUF = dat;
  45   1              while (TI == 0)
  46   1                      ;
  47   1              TI = 0;
  48   1      }
  49          char putchar (char dat)
  50          {
  51   1              SBUF = dat;
  52   1              while (TI == 0)
  53   1                      ;
  54   1              TI = 0;
  55   1              return (dat);
C51 COMPILER V9.05   MAIN                                                                  05/07/2023 15:05:49 PAGE 2   

  56   1      }
  57          
  58          void UartSendStr(u8 *str)
  59          {
  60   1              while (*str)
  61   1              {
  62   2                      UartSendByte(*str);
  63   2                      str++;
  64   2              }
  65   1      }
  66          void Uart2Init()
  67          {
  68   1              S2CON = 0x10;
  69   1              T2L = BRT;
  70   1              T2H = BRT >> 8;
  71   1              AUXR |= 0x14;
  72   1              IE2 = 0x01;
  73   1              EA = 1;
  74   1      }
  75          void Uart2Send(char dat)
  76          {
  77   1              while (busy)
  78   1                      ;
  79   1              busy = 1;
  80   1              S2BUF = dat;
  81   1      }
  82          
  83          void Uart2SendStr(char *p)
  84          {
  85   1              while (*p)
  86   1              {
  87   2                      Uart2Send(*p++);
  88   2              }
  89   1      }
  90          
  91          
  92          void Timer0Init(void) // 2毫秒@11.0592MHz
  93          {
  94   1              AUXR |= 0x80;           //定时器时钟1T模式
  95   1              TMOD &= 0xF0;           //设置定时器模式
  96   1              TL0 = 0x80;             //设置定时初始值
  97   1              TH0 = 0x44;             //设置定时初始值
  98   1              TF0 = 0;                //清除TF0标志
  99   1              TR0 = 1;                //定时器0开始计时
 100   1              TR0 = 1;          // 定时器0开始计时
 101   1              ET0 = 1;          // 使能定时器0中断
 102   1              PT0 = 1;
 103   1              EA = 1;
 104   1              //    IT0 = 1;                                    //??INT0?????
 105   1              //    EX0 = 1;                                    //??INT0??
 106   1              //    EA = 1;
 107   1              //
 108   1              //      IT1 = 1;                                    //??INT1?????
 109   1              //    EX1 = 1;                                    //??INT1??
 110   1              //    EA = 1;
 111   1      }
 112          
 113          
 114          
 115          
 116          
 117          
C51 COMPILER V9.05   MAIN                                                                  05/07/2023 15:05:49 PAGE 3   

 118          
 119          sbit X0 = P2 ^ 3;
 120          sbit X1 = P2 ^ 1;
 121          sbit X2 = P3 ^ 7;
 122          sbit X3 = P3 ^ 5;
 123          
 124          
 125          
 126          sbit LED3 = P3 ^ 4;
 127          sbit LED2 = P3 ^ 6;
 128          
 129          sbit LED1 = P2 ^ 0;
 130          sbit LED0 = P2 ^ 2;
 131          sbit Y3 = P3 ^ 4;
 132          sbit Y2 = P3 ^ 6;
 133          
 134          sbit Y1 = P2 ^ 0;
 135          sbit Y0 = P2 ^ 2;
 136          
 137          
 138          
 139          char xin[30]={0};
 140          void shurulvbo(void)
 141          {
 142   1              static u8 keybuf[40] = {0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
 143   1                                                         0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
 144   1                                                         0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
 145   1                                                                                                                                                               0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
 146   1                                                        }; //矩阵按键扫描缓冲区 8ms
 147   1              unsigned char i;
 148   1              // i=X0;
 149   1              // keybuf[0]=i;
 150   1              // i=X1;
 151   1              // keybuf[1]=i;
 152   1              //  i=X2;
 153   1              //  keybuf[2]=i;
 154   1              //   i=X3;
 155   1              //  keybuf[3]=i;
 156   1              i=X0;
 157   1              keybuf[0] = (keybuf[0] << 1) | i;
 158   1              i=X1;
 159   1              keybuf[1] = (keybuf[1] << 1) | i;
 160   1              i=X2;
 161   1              keybuf[2] = (keybuf[2] << 1) | i;
 162   1              i=X3;
 163   1              keybuf[3] = (keybuf[3] << 1) | i;
 164   1              for (i = 0; i < 10; i++) // 3按键，所以循环3次
 165   1              {
 166   2                      if ((keybuf[i] & 0xFF) == 0x00)
 167   2                      {
 168   3                              xin[i] = 0;
 169   3                      }
 170   2                      else if ((keybuf[i] & 0xFF) == 0xFF)
 171   2                      { // 连续3次扫描值为1，即1*8ms内都是弹起状态时，可认为按键已稳定的弹起
 172   3                              xin[i] = 1;
 173   3                      }
 174   2              }
 175   1      }
 176          void setzhichange(int a)
 177          {
 178   1              if(setzhi+a<0)
 179   1              {
C51 COMPILER V9.05   MAIN                                                                  05/07/2023 15:05:49 PAGE 4   

 180   2                      setzhi=0;
 181   2                      return ;
 182   2              }
 183   1              if(setzhi+a>maxsetzhi)
 184   1              {
 185   2                      setzhi=maxsetzhi;
 186   2                      return; 
 187   2              }
 188   1              setzhi=setzhi+a;
 189   1      }
 190          
 191          void keydown(int i) // 按键按下的处理、、、
 192          {
 193   1              printf("keydown %d\r\n", i);
 194   1              if(i==0)
 195   1              {
 196   2                      LED0=~LED0;
 197   2              }
 198   1              if(i==keylow)
 199   1              {
 200   2                      setzhichange(-1);
 201   2                      return;
 202   2              }
 203   1              if(i==keyup)
 204   1              {
 205   2                      setzhichange(1);
 206   2                      return;
 207   2              }
 208   1              if(i==keyok)
 209   1              {
 210   2                      nowzhi=setzhi;
 211   2                      printf("setdianliu%d\r\n",nowzhi);
 212   2              }
 213   1      }
 214          // 按键连续按下多少次的操作。。
 215          int setbizhi(int times)
 216          {
 217   1              if(times<100)
 218   1              {
 219   2                      return 1;
 220   2              }
 221   1              if(times<1000)
 222   1              {
 223   2                      return 10;
 224   2              }
 225   1              return 50  ;
 226   1      }
 227          // 2ms 一次的话，那300ms一次ok的吧。。
 228          void dolongtimes(int i,int times)
 229          {
 230   1              int xielv;
 231   1              times=times-300;
 232   1              if(times<0)
 233   1              {
 234   2                      return ;
 235   2              }
 236   1              xielv=setbizhi(times);
 237   1              if(times%150!=0)
 238   1              {
 239   2                      return;
 240   2              }
 241   1              printf("dolongtimes %d xielv %d\r\n", i,xielv);
C51 COMPILER V9.05   MAIN                                                                  05/07/2023 15:05:49 PAGE 5   

 242   1              if(i==keylow)
 243   1              {
 244   2                      setzhichange(-xielv);
 245   2                      return;
 246   2              }
 247   1              if(i==keyup)
 248   1              {
 249   2                      setzhichange(xielv);
 250   2                      return;
 251   2              }
 252   1      }
 253          void yout_set(char weizhi,char zhi)
 254          {
 255   1      if(weizhi==0)Y0=zhi;
 256   1      if(weizhi==1)Y1=zhi;
 257   1      if(weizhi==2)Y2=zhi;
 258   1      if(weizhi==3)Y3=zhi;
 259   1      
 260   1      }
 261          void ledclose(int weizhi)
 262          {
 263   1              if(weizhi==keyon)
 264   1              {
 265   2                      return ;
 266   2              }
 267   1              yout_set(weizhi,1);
 268   1      }
 269          void ledopen(int weizhi)
 270          {
 271   1              if(weizhi==keyon)
 272   1              {
 273   2                      return ;
 274   2              }
 275   1              yout_set(weizhi,0);
 276   1      }
 277          void keyallchuli()
 278          {
 279   1              int i;
 280   1              static char flag[10]={0};//标志记录
 281   1              static int dowmtimes[10]={0};//标志记录
 282   1              for( i=0;i<6;i++)
 283   1              {
 284   2                      if(xin[i]==0)
 285   2                      {
 286   3                              if(flag[i]==0)//代表按键第一次按下。。。
 287   3                              {
 288   4                                      flag[i]=1;
 289   4                                      keydown(i);
 290   4                              }
 291   3                              ledopen(i);
 292   3                              dowmtimes[i]++;
 293   3                              dolongtimes(i,dowmtimes[i]);
 294   3                      }
 295   2                      else 
 296   2                      {
 297   3                              flag[i]=0;
 298   3                              dowmtimes[i]=0;
 299   3                              ledclose(i);
 300   3                      }
 301   2              }
 302   1      }
 303          
C51 COMPILER V9.05   MAIN                                                                  05/07/2023 15:05:49 PAGE 6   

 304          int tmp=203;// 温度值
 305          void shownwendu()
 306          {
 307   1              char dataxx[40];
 308   1              sprintf(dataxx,"TMP:%3d.%01d  ",tmp/10,tmp%10);
 309   1              LCD_ShowString(0,120,dataxx,RED,WHITE,32,0);
 310   1      }
 311          
 312          void shownow()
 313          {
 314   1              char dataxx[40];
 315   1              sprintf(dataxx,"NOW:%05d",nowzhi);
 316   1              LCD_ShowString(0,40,dataxx,RED,WHITE,32,0);
 317   1      }
 318          void showsetzhi()
 319          {
 320   1              char dataxx[40];
 321   1              sprintf(dataxx,"SET:%05d",setzhi);
 322   1              LCD_ShowString(0,80,dataxx,RED,WHITE,32,0);
 323   1      }
 324          void showdata()
 325          {
 326   1              shownow();
 327   1              showsetzhi();
 328   1              shownwendu();
 329   1      }
 330          void getwendu();
 331          void main()
 332          {
 333   1              int i=0;
 334   1              P0M0 = 0x00;
 335   1          P0M1 = 0x02;
 336   1          P1M0 = 0x00;
 337   1          P1M1 = 0x00;
 338   1          P2M0 = 0x00;
 339   1          P2M1 = 0x00;
 340   1          P3M0 = 0x00;
 341   1          P3M1 = 0x00;
 342   1          P4M0 = 0x00;
 343   1          P4M1 = 0x00;
 344   1          P5M0 = 0x00;
 345   1          P5M1 = 0x00;
 346   1              
 347   1              SPCTL = 0x50|0x80;                               //??SPI????
 348   1          SPSTAT = 0xc0;                              //?????
 349   1              LCD_LED=0;
 350   1              LED0=~LED0;
 351   1              delay_ms(100);
 352   1              
 353   1              LCD_Init();
 354   1              UartInit();
 355   1      
 356   1              Timer0Init();
 357   1              delay_ms(100);
 358   1      
 359   1              LCD_Fill(0,0,320,240,WHITE);
 360   1              delay_ms(100);
 361   1              
 362   1              while(1)
 363   1              {
 364   2                      shurulvbo();
 365   2                  keyallchuli();
C51 COMPILER V9.05   MAIN                                                                  05/07/2023 15:05:49 PAGE 7   

 366   2              
 367   2                      delay_ms(1);
 368   2                      if(i++>100)
 369   2                      {
 370   3                              i=0;
 371   3                              getwendu();
 372   3                              showdata();
 373   3                      }
 374   2              }
 375   1      }
 376          int weishu1, weishu2, weishu3, weishu4;
 377          char buf1[100];
 378          int timeleft1, timeleft2, timeleft3, timeleft4;
 379          void chuankou1put(char c)
 380          {
 381   1              buf1[weishu1++] = c;
 382   1              if (weishu1 > 80)
 383   1                      weishu1 = 0;
 384   1              timeleft1 = 10;
 385   1      }
 386          // 写个通用的，懒得去改后面的了。先偷懒了。。。
 387          void getwendufromrsp(char *p)
 388          {
 389   1              char* index;
 390   1              int ans;
 391   1              index=strstr(p,"getwendu");
 392   1              if(index==0)
 393   1              {
 394   2                      return  ;
 395   2              }
 396   1              ans=atoi(index+strlen("getwendu"));
 397   1              if(ans==-1)
 398   1              {
 399   2                      return;
 400   2              }
 401   1              tmp=ans;
 402   1      }
 403          void chuankou1jisuan()
 404          {
 405   1              getwendufromrsp(buf1);
 406   1              memset(buf1, 0, sizeof(buf1));
 407   1              weishu1 = 0;
 408   1      }
 409          void chuankou1time()
 410          {
 411   1              if (timeleft1 > 0)
 412   1              {
 413   2                      timeleft1--;
 414   2                      if (timeleft1 == 0) // 数据一次收完了.
 415   2                      {
 416   3                              chuankou1jisuan();
 417   3                      }
 418   2              }
 419   1      }
 420          
 421          // 采用中断和处理分开的方式吧，方便调试。。
 422          void getwendu()
 423          {
 424   1              delay_ms(10);
 425   1              printf("getwendu");
 426   1              delay_ms(40);
 427   1              // getwendufromrsp()
C51 COMPILER V9.05   MAIN                                                                  05/07/2023 15:05:49 PAGE 8   

 428   1      }
 429          void UartIsr() interrupt 4
 430          {
 431   1      
 432   1              if (RI)
 433   1              {
 434   2                      RI = 0;
 435   2                      chuankou1put(SBUF);
 436   2              }
 437   1      }
 438          
 439          void tm0_isr() interrupt 1
 440          {
 441   1              chuankou1time();
 442   1      }
 443          
 444          
 445          
 446          
 447          
 448          
 449          
 450          
 451          
 452          
 453          
 454          
 455          
 456          
 457          
 458          
 459          
 460          
 461          
 462          
 463          
 464          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1680    ----
   CONSTANT SIZE    =     96    ----
   XDATA SIZE       =    230     136
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
