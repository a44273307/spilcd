C51 COMPILER V9.05   MAIN                                                                  05/09/2023 18:13:45 PAGE 1   


C51 COMPILER V9.05, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN main.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE main.c LARGE BROWSE DEBUG OBJECTEXTEND

line level    source

   1          #include "STC8G.h"
   2          #include <intrins.h>
   3          #include <stdio.h>
   4          #include "lcd.h"
   5          #include <string.h>
   6          
   7          #include <stdio.h>
   8          #include <string.h>
   9          #include <stdlib.h>
  10          #include "pic.h"
  11          
  12          #define u8 unsigned char
  13          #define FOSC 24000000UL
  14          #define BRT (65536 - FOSC / 9600 / 4)
  15          
  16          int keyon= 0;
  17          int keylow=1;
  18          int keyok= 2;
  19          int keyup=3;
  20          
  21          int nowzhi=500;
  22          int setzhi=500;
  23          #define maxsetzhi 2047 
  24          
  25          
  26          
  27          bit busy;
  28          void UartInit() // 11.0592 9600
  29          {
  30   1              SCON = 0x50;            //8位数据,可变波特率
  31   1              AUXR |= 0x40;           //定时器时钟1T模式
  32   1              AUXR &= 0xFE;           //串口1选择定时器1为波特率发生器
  33   1              TMOD &= 0x0F;           //设置定时器模式
  34   1              TL1 = 0x8F;             //设置定时初始值
  35   1              TH1 = 0xFD;             //设置定时初始值
  36   1              ET1 = 0;                //禁止定时器%d中断
  37   1              TR1 = 1;                //定时器1开始计时
  38   1              ES = 1;
  39   1              EA = 1;
  40   1              P_SW1 = 0x00; // RXD/P3.0, TXD/P3.1
  41   1      }
  42          void UartSendByte(u8 dat)
  43          {
  44   1              SBUF = dat;
  45   1              while (TI == 0)
  46   1                      ;
  47   1              TI = 0;
  48   1      }
  49          char putchar (char dat)
  50          {
  51   1              SBUF = dat;
  52   1              while (TI == 0)
  53   1                      ;
  54   1              TI = 0;
  55   1              return (dat);
C51 COMPILER V9.05   MAIN                                                                  05/09/2023 18:13:45 PAGE 2   

  56   1      }
  57          
  58          void UartSendStr(u8 *str)
  59          {
  60   1              while (*str)
  61   1              {
  62   2                      UartSendByte(*str);
  63   2                      str++;
  64   2              }
  65   1      }
  66          void Uart2Init()
  67          {
  68   1              S2CON = 0x10;
  69   1              T2L = BRT;
  70   1              T2H = BRT >> 8;
  71   1              AUXR |= 0x14;
  72   1              IE2 = 0x01;
  73   1              EA = 1;
  74   1      }
  75          void Uart2Send(char dat)
  76          {
  77   1              while (busy)
  78   1                      ;
  79   1              busy = 1;
  80   1              S2BUF = dat;
  81   1      }
  82          
  83          void Uart2SendStr(char *p)
  84          {
  85   1              while (*p)
  86   1              {
  87   2                      Uart2Send(*p++);
  88   2              }
  89   1      }
  90          
  91          
  92          void Timer0Init(void) // 2毫秒@11.0592MHz
  93          {
  94   1              AUXR |= 0x80;           //定时器时钟1T模式
  95   1              TMOD &= 0xF0;           //设置定时器模式
  96   1              TL0 = 0x80;             //设置定时初始值
  97   1              TH0 = 0x44;             //设置定时初始值
  98   1              TF0 = 0;                //清除TF0标志
  99   1              TR0 = 1;                //定时器0开始计时
 100   1              TR0 = 1;          // 定时器0开始计时
 101   1              ET0 = 1;          // 使能定时器0中断
 102   1              PT0 = 1;
 103   1              EA = 1;
 104   1              //    IT0 = 1;                                    //??INT0?????
 105   1              //    EX0 = 1;                                    //??INT0??
 106   1              //    EA = 1;
 107   1              //
 108   1              //      IT1 = 1;                                    //??INT1?????
 109   1              //    EX1 = 1;                                    //??INT1??
 110   1              //    EA = 1;
 111   1      }
 112          
 113          
 114          
 115          
 116          
 117          
C51 COMPILER V9.05   MAIN                                                                  05/09/2023 18:13:45 PAGE 3   

 118          
 119          sbit X0 = P2 ^ 3;
 120          sbit X1 = P2 ^ 1;
 121          sbit X2 = P3 ^ 7;
 122          sbit X3 = P3 ^ 5;
 123          
 124          
 125          
 126          sbit LED3 = P3 ^ 4;
 127          sbit LED2 = P3 ^ 6;
 128          
 129          sbit LED1 = P2 ^ 0;
 130          sbit LED0 = P2 ^ 2;
 131          sbit Y3 = P3 ^ 4;
 132          sbit Y2 = P3 ^ 6;
 133          
 134          sbit Y1 = P2 ^ 0;
 135          sbit Y0 = P2 ^ 2;
 136          
 137          
 138          
 139          char xin[30]={0};
 140          void shurulvbo(void)
 141          {
 142   1              static u8 keybuf[40] = {0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
 143   1                                                         0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
 144   1                                                         0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
 145   1                                                                                                                                                               0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
 146   1                                                        }; //矩阵按键扫描缓冲区 8ms
 147   1              unsigned char i;
 148   1              // i=X0;
 149   1              // keybuf[0]=i;
 150   1              // i=X1;
 151   1              // keybuf[1]=i;
 152   1              //  i=X2;
 153   1              //  keybuf[2]=i;
 154   1              //   i=X3;
 155   1              //  keybuf[3]=i;
 156   1              i=X0;
 157   1              keybuf[0] = (keybuf[0] << 1) | i;
 158   1              i=X1;
 159   1              keybuf[1] = (keybuf[1] << 1) | i;
 160   1              i=X2;
 161   1              keybuf[2] = (keybuf[2] << 1) | i;
 162   1              i=X3;
 163   1              keybuf[3] = (keybuf[3] << 1) | i;
 164   1              for (i = 0; i < 10; i++) // 3按键，所以循环3次
 165   1              {
 166   2                      if ((keybuf[i] & 0xFF) == 0x00)
 167   2                      {
 168   3                              xin[i] = 0;
 169   3                      }
 170   2                      else if ((keybuf[i] & 0xFF) == 0xFF)
 171   2                      { // 连续3次扫描值为1，即1*8ms内都是弹起状态时，可认为按键已稳定的弹起
 172   3                              xin[i] = 1;
 173   3                      }
 174   2              }
 175   1      }
 176          char flagsetzhichange=0;
 177          void setzhichange(int a)
 178          {
 179   1              if(setzhi+a<0)
C51 COMPILER V9.05   MAIN                                                                  05/09/2023 18:13:45 PAGE 4   

 180   1              {
 181   2                      setzhi=0;
 182   2                      return ;
 183   2              }
 184   1              if(setzhi+a>maxsetzhi)
 185   1              {
 186   2                      setzhi=maxsetzhi;
 187   2                      return; 
 188   2              }
 189   1              setzhi=setzhi+a;
 190   1              flagsetzhichange=1;
 191   1              printf("setdianliu%d\r\n",setzhi);
 192   1              // printf("setzhi %d",setzhi);
 193   1      }
 194          
 195          void keydown(int i) // 按键按下的处理、、、
 196          {
 197   1              
 198   1              if(i==0)
 199   1              {
 200   2                      LED0=~LED0;
 201   2              }
 202   1              if(i==keylow)
 203   1              {
 204   2                      setzhichange(-1);
 205   2                      return;
 206   2              }
 207   1              if(i==keyup)
 208   1              {
 209   2                      setzhichange(1);
 210   2                      return;
 211   2              }
 212   1              if(i==keyok)
 213   1              {
 214   2                      nowzhi=setzhi;
 215   2                      // printf("setdianliu%d\r\n",nowzhi);
 216   2              }
 217   1      }
 218          int keyshi=5;
 219          // 按键连续按下多少次的操作。。
 220          int setbizhi(int times)
 221          {
 222   1              if(times<15*keyshi)
 223   1              {
 224   2                      return 1;
 225   2              }
 226   1              if(times<30*keyshi)
 227   1              {
 228   2                      return 10;
 229   2              }
 230   1              return 50  ;
 231   1      }
 232          // 2ms 一次的话，那300ms一次ok的吧。。
 233          void dolongtimes(int i,int times)
 234          {
 235   1              int xielv;
 236   1              times=times-150;
 237   1              if(times<0)
 238   1              {
 239   2                      return ;
 240   2              }
 241   1              xielv=setbizhi(times);
C51 COMPILER V9.05   MAIN                                                                  05/09/2023 18:13:45 PAGE 5   

 242   1              if(times%keyshi!=0)
 243   1              {
 244   2                      return;
 245   2              }
 246   1              if(i==keylow)
 247   1              {
 248   2                      setzhichange(-xielv);
 249   2                      return;
 250   2              }
 251   1              if(i==keyup)
 252   1              {
 253   2                      setzhichange(xielv);
 254   2                      return;
 255   2              }
 256   1      }
 257          void yout_set(char weizhi,char zhi)
 258          {
 259   1      if(weizhi==0)Y0=zhi;
 260   1      if(weizhi==1)Y1=zhi;
 261   1      if(weizhi==2)Y2=zhi;
 262   1      if(weizhi==3)Y3=zhi;
 263   1      
 264   1      }
 265          void ledclose(int weizhi)
 266          {
 267   1              if(weizhi==keyon)
 268   1              {
 269   2                      return ;
 270   2              }
 271   1              yout_set(weizhi,1);
 272   1      }
 273          void ledopen(int weizhi)
 274          {
 275   1              if(weizhi==keyon)
 276   1              {
 277   2                      return ;
 278   2              }
 279   1              yout_set(weizhi,0);
 280   1      }
 281          void keyallchuli()
 282          {
 283   1              int i;
 284   1              static char flag[10]={0};//标志记录
 285   1              static int dowmtimes[10]={0};//标志记录
 286   1              for( i=0;i<6;i++)
 287   1              {
 288   2                      if(xin[i]==0)
 289   2                      {
 290   3                              if(flag[i]==0)//代表按键第一次按下。。。
 291   3                              {
 292   4                                      flag[i]=1;
 293   4                                      keydown(i);
 294   4                              }
 295   3                              ledopen(i);
 296   3                              dowmtimes[i]++;
 297   3                              dolongtimes(i,dowmtimes[i]);
 298   3                      }
 299   2                      else 
 300   2                      {
 301   3                              flag[i]=0;
 302   3                              dowmtimes[i]=0;
 303   3                              ledclose(i);
C51 COMPILER V9.05   MAIN                                                                  05/09/2023 18:13:45 PAGE 6   

 304   3                      }
 305   2              }
 306   1      }
 307          
 308          int tmp=203;// 温度值
 309          void shownwendu()
 310          {
 311   1              char dataxx[40];
 312   1              sprintf(dataxx,"TMP:%3d.%01d  ",tmp/10,tmp%10);
 313   1              LCD_ShowString(0,120,dataxx,RED,WHITE,32,0);
 314   1      }
 315          
 316          void shownow()
 317          {
 318   1              char dataxx[40];
 319   1              sprintf(dataxx,"NOW:%05d",nowzhi);
 320   1              LCD_ShowString(0,40,dataxx,RED,WHITE,32,0);
 321   1      }
 322          void showsetzhi()
 323          {
 324   1              char dataxx[40];
 325   1              sprintf(dataxx,"SET:%05d",setzhi);
 326   1              LCD_ShowString(0,80,dataxx,RED,WHITE,32,0);
 327   1      }
 328          void showdata()
 329          {
 330   1              shownow();
 331   1              showsetzhi();
 332   1              shownwendu();
 333   1      }
 334          void getwendu();
 335          void showpic()
 336          {
 337   1              // u8 i,j;
 338   1              // for(j=0;j<5;j++)
 339   1              //      {
 340   1              //              for(i=0;i<6;i++)
 341   1              //              {
 342   1              //                      LCD_ShowPicture(40*i,120+j*40,40,40,gImage_1);
 343   1              //              }
 344   1              //      }
 345   1              LCD_ShowPicture(40,120,90,120,gImage_1);
 346   1      }
 347          void main()
 348          {
 349   1              
 350   1              int rumtimes=0;
 351   1              delay_ms(100);
 352   1              P0M0 = 0x00;
 353   1          P0M1 = 0x02;
 354   1          P1M0 = 0x00;
 355   1          P1M1 = 0x00;
 356   1          P2M0 = 0x00;
 357   1          P2M1 = 0x00;
 358   1          P3M0 = 0x00;
 359   1          P3M1 = 0x00;
 360   1          P4M0 = 0x00;
 361   1          P4M1 = 0x00;
 362   1          P5M0 = 0x00;
 363   1          P5M1 = 0x00;
 364   1              
 365   1              SPCTL = 0x50|0x80;                               //??SPI????
C51 COMPILER V9.05   MAIN                                                                  05/09/2023 18:13:45 PAGE 7   

 366   1          SPSTAT = 0xc0;                              //?????
 367   1              LCD_LED=0;
 368   1              LED0=~LED0;
 369   1              delay_ms(50);
 370   1              
 371   1              LCD_Init();
 372   1              UartInit();
 373   1      
 374   1              Timer0Init();
 375   1              delay_ms(50);
 376   1      
 377   1              LCD_Fill(0,0,320,240,WHITE);
 378   1              printf("system begin\r");
 379   1              delay_ms(50);
 380   1              while(1)
 381   1              {
 382   2                      shurulvbo();
 383   2                  keyallchuli();
 384   2                      delay_ms(1);
 385   2                      if(flagsetzhichange==1)
 386   2                      {
 387   3                              flagsetzhichange=0;
 388   3                              showdata();
 389   3                              rumtimes=0;
 390   3                      }
 391   2                      else
 392   2                      {
 393   3                              rumtimes++;
 394   3                      }
 395   2                      if(rumtimes++>500)
 396   2                      {
 397   3                              rumtimes=0;
 398   3                              getwendu();
 399   3                              showdata();
 400   3                      }
 401   2              }
 402   1      }
 403          int weishu1, weishu2, weishu3, weishu4;
 404          char buf1[100];
 405          int timeleft1, timeleft2, timeleft3, timeleft4;
 406          void chuankou1put(char c)
 407          {
 408   1              buf1[weishu1++] = c;
 409   1              if (weishu1 > 80)
 410   1                      weishu1 = 0;
 411   1              timeleft1 = 10;
 412   1      }
 413          // 写个通用的，懒得去改后面的了。先偷懒了。。。
 414          void getwendufromrsp(char *p)
 415          {
 416   1              char* index;
 417   1              int ans;
 418   1              index=strstr(p,"getwendu");
 419   1              if(index==0)
 420   1              {
 421   2                      return  ;
 422   2              }
 423   1              ans=atoi(index+strlen("getwendu"));
 424   1              if(ans==-1)
 425   1              {
 426   2                      return;
 427   2              }
C51 COMPILER V9.05   MAIN                                                                  05/09/2023 18:13:45 PAGE 8   

 428   1              tmp=ans;
 429   1      }
 430          void chuankou1jisuan()
 431          {
 432   1              getwendufromrsp(buf1);
 433   1              memset(buf1, 0, sizeof(buf1));
 434   1              weishu1 = 0;
 435   1      }
 436          void chuankou1time()
 437          {
 438   1              if (timeleft1 > 0)
 439   1              {
 440   2                      timeleft1--;
 441   2                      if (timeleft1 == 0) // 数据一次收完了.
 442   2                      {
 443   3                              chuankou1jisuan();
 444   3                      }
 445   2              }
 446   1      }
 447          
 448          // 采用中断和处理分开的方式吧，方便调试。。
 449          void getwendu()
 450          {
 451   1              delay_ms(10);
 452   1              printf("getwendu");
 453   1              delay_ms(40);
 454   1      }
 455          void UartIsr() interrupt 4
 456          {
 457   1      
 458   1              if (RI)
 459   1              {
 460   2                      RI = 0;
 461   2                      chuankou1put(SBUF);
 462   2              }
 463   1      }
 464          
 465          void tm0_isr() interrupt 1
 466          {
 467   1              chuankou1time();
 468   1      }
 469          
 470          
 471          
 472          
 473          
 474          
 475          
 476          
 477          
 478          
 479          
 480          
 481          
 482          
 483          
 484          
 485          
 486          
 487          
 488          
 489          
C51 COMPILER V9.05   MAIN                                                                  05/09/2023 18:13:45 PAGE 9   

 490          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1783    ----
   CONSTANT SIZE    =  21679    ----
   XDATA SIZE       =    233     138
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
